                                   Передача лямбда-выражений в качестве аргументов.
    Как пояснялось ранее, лямбда-выражение может быть использовано в любом контексте, предоставляющем его целевой
тип. Один из таких контекстов возни­кает при передаче лямбда-выражения в качестве аргумента. В действительности
передача лямбда-выражений в качестве аргументов является весьма распростра­ненным примером их применения. Более того,
это весьма эффективное их при­ менение, поскольку оно дает возможность передать исполняемый код методу в качестве
аргумента.
    Для передачи лямбда-выражения в качестве аргумента параметр, получающий это выражение в качестве аргумента, дол-
жен иметь тип функционального интерфейса, совместимого с этим лямбда-выражением.

Пример.
    Результат выводимый данной программой.

Это исходная строка: Лямбда-выражения повышают эффективность Java.
Это строка в верхнем регистре: ЛЯМБДА-ВЫРАЖЕНИЯ ПОВЫШАЮТ ЭФФЕКТИВНОСТЬ JAVA.
Это строка с удаленными пробелами: Лямбда-выраженияповышаютэффективностьJava.
Это обращенная строка: .avaJ ьтсонвиткеффэ тюашывоп яинежарыв-адбмяЛ

    Прежде всего обратите внимание в данном примере программы на метод stringOp(), у которого имеются два параметра.
Первый параметр относится к типу StringFunc, т.е. к функциональному интерфейсу. Следовательно, этот параметр может
получать ссылку на любой экземпляр функционального интерфейса StringFunc, в том числе и создаваемый в лямбда-выражении.
А второй параметр метода, stringOp(), относится к типу String и обозначает обрабатываемую сим­вольную строку.
    Затем обратите внимание на первый вызов метода stringOp():

outStr = stringOp((str) -> str.toUpperCase( ), inStr);

    где в качестве аргумента данному методу передается простое лямбда-выражение. При этом создается экземпляр функци-
онального интерфейса StringFunc и ссылка на данный объект передается первому параметру метода stringOp(). Таким образом,
код лямбда-выражения, встраиваемый в экземпляр класса, передается данному методу. Контекст целевого типа лямбда-выраже-
ния определяется типом его параметра. А поскольку лямбда-выражение совместимо с этим типом, то рас­сматриваемый здесь
вызов достоверен. Встраивать в метод такие простые лямбда­выражения, как упомянутое выше, нередко оказывается очень
удобно, особенно когда лямбда-выражение предназначается для однократного употребления.
    Если блочное выражение кажется слишком длинным для встраивания в вызов метода, то его можно просто присвоить пере-
менной ссылки на функциональный интерфейс, как это делалось в предыдущих примерах. И тогда остается только передать эту
ссылку вызываемому методу.
    И последнее замечание: помимо инициализации переменных, присваивания и передачи аргументов, следующие операции
образуют контекст целевого типа лямбда-выражений: приведение типов, тернарная операция ?, инициализация массивов, опера-
торы return, а также сами лямбда-выражения.