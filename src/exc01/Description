                                    Введение в лямбда-выражения.
    Особое значение для ясного представления о том, каким образом лямбда-выражения реализованы вJava, имеют две
языковые конструкции. Первой из них является само лямбда-выражение, а второй - функциональный интерфейс.
    Лямбда-выражение, по существу, является анонимным (т.е. безымянным) методом. Но этот метод не выполняется
самостоятельно, а служит для реализации ме­тода, определяемого в функциональном интерфейсе. Таким образом, лямбда-
выражение приводит к некоторой форме анонимного класса. Нередко лямбда-выражения называют также замыканиями.
    Функциональным называется такой интерфейс, который содержит один и только один абстрактный метод. Как правило,
в таком методе определяется предполагаемое назначение интерфейса. Следовательно, функциональный интерфейс пред-
ставляет единственное действие. Например, стандартный интерфейс Runnable является функциональным, поскольку в нем
определяется единственный метод run(), который, в свою очередь, определяет действие самого интерфейса Runnable.
Кроме того, в функциональном интерфейсе определяется целевой тип лямбда-выражения. В связи с этим необходимо под-
черкнуть следующее: лямбда-выражение можно использовать только в том контексте, в котором определен его целевой тип.
И еще одно замечание: функциональный интерфейс иногда еще называют SАМ-типом, где SАМ обозначает Single Abstract
Method - единственный абстрактный метод.


                                    Основные положения о лямбда-выражениях.
    Лямбда-выражение вносит новый элемент в синтаксис и оператор в язык Java. Этот новый оператор называется
лямбда-оператором, или операцией "стрелка" (->). Он разделяет лямбда-выражение на две части. В левой части указы-
ваются любые параметры, требующиеся в лямбда-выражении. (Если же параметры не требуются, то они указываются пустым
списком.) А в правой части находится тело лямбда-выражения, где указываются действия, выполняемые лямбда-выражением.
Операция -> буквально означает "становиться" или "переходить".
    В Java определены две разновидности тел лямбда-выражений. Одна из них со­ стоит из единственного выражения, а
другая - из блока кода.
    Рассмотрим самое простое лямбда-выражение.

Пример 1.
    В приведенном лямбда-выражении вычисьяется значение константы.

() -> 123.45

    Это лямбда-выражение не принимает никаких параметров, а следовательно, список его параметров оказывается пустым.
Оно возвращает значение константы 123.45. Следовательно, это выражение аналогично вызову следующего метода:

double myMeth(){ return 123 . 45; }



Пример 2.

() -> Math.random() * 100

    В этом лямбда-выражении из метода Маth.random() получается псевдослучайное значение, которое умножается на 100
и затем возвращается результат. И это лямбда-выражение не требует параметров.



Пример 3.
    Если же лямбда-выражению требуются параметры, они указываются списком в левой части лямбда-оператора.

(n) -> (n % 2)==0

    Это выражение возвращает логическое значение true, если числовое значе­ ние параметра n оказывается четным. Тип
параметра (в данном случае n) можно указывать явно, но зачастую в этом нет никакой нужды, поскольку его тип в боль-
шинстве случаев выводится. Как и в именованном методе, в лямбда-выражении можно указывать столько параметров, сколько
требуется.



                                             Функциональный интерфейс.
    Функциональным называется такой интерфейс, в котором определяется единственный абстрактный метод. Можно возразить,
ведь все методы интерфейса неявно считаются абстрактными, но так было до внедрения лямбда-выражений. Начиная с версии
JDК 8 для метода, объявляемого в интерфейсе, можно определить стандартное поведение по умолчанию, и поэтому он назы-
вается методом по умолчанию. Отныне интерфейсный метод считается абстрактным лишь в том случае, если у него отсутствует
реализация по умолчанию. А поскольку интерфейсные методы, не определяемые по умолчанию, неявно счи­ таются абстрактными,
то их не обязательно объявлять с модификатором доступа abstract.

Пример.

interface MyNumber{
    double getValue();
}

    В данном случае метод getValue() неявно считается абстрактным и единствен­ным определяемым в интерфейсе MyNumber.
Следовательно, интерфейс MyNumber является функциональным, а его функция определяется методом getValue().
    Лямбда-выражение невыполняется самостоятельно, а скорее образует реализацию абстрактного метода, определенного в
функциональном интерфейсе, где указывается его целевой тип. Таким образом, лямбда-выражение может быть указано только
в том контексте, в котором определен его целевой тип. Один из таких контекстов создается в том случае, когда лямбда-
выражение присваивается ссылке на функциональный интерфейс. К числу других контекстов целевого типа относятся иници-
ализация переменных, операторы return и аргументы методов.

Пример.
    Рассмотрим пример, демонстрирующий применение лямбда-выражения в контексте присваивания. С этой целью сначала
объявляется ссылка на функциональ­ный интерфейс MyNumber.

MyNumЬer num;

    Затем лямбда-выражение присваивается этой ссылке на функциональный ин­терфейс следующим образом:

num = () -> 123.45;

    Когда лямбда-выражение появляется вконтексте своего целевого типа, автома­тически создается экземпляр класса,
реализующего функциональный интерфейс, причем лямбда-выражение определяет поведение абстрактного метода, объявля­емого
в функциональном интерфейсе. А когда этот метод вызывается через свой адресат, выполняется лямбда-выражение. Таким
образом, лямбда-выражение позволяет преобразовать сегмент кода в объект.
    В предыдущем примере лямбда-выражение становится реализацией метода getValue(). В итоге получается значение кон-
станты 123.45, которое выводится на экран следующим образом:

System.out.println("num.getValue());

    Лямбда-выражение было ранее присвоено переменной num ссылки на функциональный интерфейс MyNumber. Оно возвращает
значение константы 123.45, которое получается в результате вызова метода getValue().
    Для того чтобы лямбда-выражение использовалось в контексте своего целевого типа, абстрактный метод и лямбда-выра-
жение должны быть совместимыми по типу. Так, если в абстрактном методе указываются два параметратипа int, тои в лямбда­
выражении должны быть указаны два параметра, тип которых явно обозначается как int или неявно выводится как int из
самого контекста. В общем, параметры лямбда­выражения должны быть совместимы по типу и количеству с параметрами
абстрактного метода. Это же относится и к возвращаемым типам. А любые исключения, генерируемые в лямбда-выражении,
должны быть приемлемы для абстрактного метода.




























